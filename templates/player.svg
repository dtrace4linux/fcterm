<svg xmlns="http://www.w3.org/2000/svg" 
  xmlns:xlink="http://www.w3.org/1999/xlink" 
  id="terminal" baseProfile="full" 
  viewBox="0 0 $page_width $view_ht" 
  width="$page_width" 
  version="1.1">

  <defs>
  	<!-- rows: $rows columns: $columns -->
	<style type="text/css" id="generated-style"><![CDATA[
	    #screen {
                font-family: 'DejaVu Sans Mono', monospace;
                font-style: normal;
                font-size: 14px;
            }
	    text {
                dominant-baseline: text-before-edge;
                white-space: pre;
            }
    
]]></style>

<style type="text/css">
	.cursor {fill: #$cursor;}
	.foreground {fill: #c5c5c5;}
        .background {fill: #1c1c1c;}
$colors

#play-button {
               transform: translate(30px, calc(100% - 45px));
           }
           #pause-button {
               transform: translate(30px, calc(100% - 45px));
           }
           #wide_track {
               transform: translate(150px, calc(100% - 45px));
           }
           #track {
               transform: translate(150px, calc(100% - 33px));
           }
           #slider_button {
               transform: translate(0px, calc(100% - 30px));
           }
           #timer {
               transform: translate(60px, calc(100% - 38px));
               font-family: 'DejaVu Sans Mono', monospace;
               font-style: normal;
               font-size: 14px;
           }

        </style>

<!-- -->	
        <rect id="slider_wide_track" height="30px" width="65%"/>
        <rect id="slider_track" height="6px" width="65%"/>
        <circle id="slider_button" r="10px" class="color1"/>
        <g id="icon-play">
           <rect x="-5" y="0" width="25" height="30" class="background"/>
           <path d="M0 4l14 11-14 11z"/>
        </g>
        <g id="icon-pause">
           <rect x="-5" y="0" width="25" height="30" class="background"/>
           <rect x="0" y="5" width="5" height="20"/>
           <rect x="10" y="5" width="5" height="20"/>
        </g>
<!-- -->	
	</defs>

    <rect id="terminalui" class="background" width="100%" height="100%" ry="4.5"/>
    <circle cx="24" cy="23" r="7" class="c1"/>
    <circle cx="44" cy="23" r="7" class="c3"/>
    <circle cx="64" cy="23" r="7" class="c2"/>


<svg id="screen" width="$page_width" height="$page_ht" 
x="0" y="50"
  viewBox="0 0 $page_width $page_ht" preserveAspectRatio="xMidYMin slice">
  <rect class="c0" height="100%" width="100%" x="0" ry="4"/>
<!-- -->
  <defs>
  <!-- defs1 -->
$defs1
  </defs>
  <g id="screen_view">
  <!-- defs2 -->
$defs2
  </g>
</svg>
<!-- -->
    <text id="timer" class="foreground">0:00/0:00</text>
    <!-- Invisible, wider track to make frame seeking easier -->
    <use xlink:href="#slider_wide_track" id="wide_track" class="background"/>
    <!-- Visible track -->
    <use xlink:href="#slider_track" id="track" class="c5"/>
    <use xlink:href="#slider_button" id="slider_1" class="c2"/>
    <use xlink:href="#icon-play" id="play-button" class="foreground"/>
    <use xlink:href="#icon-pause" id="pause-button" class="foreground"/>
    <script type="text/javascript" id="generated-js"><![CDATA[
        var termtosvg_vars = {
            transforms: [
		$transforms
            ],
            timings: {
                duration: ${t},
                iterations: Infinity
            }
        };]]></script>
    <script type="text/javascript">
var animation = document.getElementById("screen_view").animate(
    termtosvg_vars.transforms,
    termtosvg_vars.timings
)
var terminal   = document.getElementById('terminal')
var play_button = terminal.getElementById('play-button');
var pause_button = terminal.getElementById('pause-button');
var is_playing = true;

animation.onfinish = function() {
  play_button.setAttribute('display', 'inline')
  pause_button.setAttribute('display', 'none')
  is_playing = false;
};

function togglePlayPause() {
    if (is_playing) {
      animation.pause()
      play_button.setAttribute('display', 'inline')
      pause_button.setAttribute('display', 'none')
      is_playing = false
    } else {
      animation.play()
      play_button.setAttribute('display', 'none')
      pause_button.setAttribute('display', 'inline')
      is_playing = true
    }
};

play_button.addEventListener('click', togglePlayPause, false)
pause_button.addEventListener('click', togglePlayPause, false)


var style = getComputedStyle(terminal);
var animation_duration = termtosvg_vars.timings.duration / 1000
var timer = terminal.getElementById('timer')

function timer_from_seconds(t) {
    minutes = Math.floor(t / 60);
    seconds = Math.floor(t % 60);
    return minutes + ':' + ("0" + seconds).slice(-2)
}
function update_timer() {
    var current_time = (animation.currentTime / 1000) % animation_duration
    timer.textContent =  timer_from_seconds(current_time) + "/" + timer_from_seconds(animation_duration)
}
setInterval(update_timer, "100ms")




var slider_1  = terminal.getElementById('slider_1');
function getTranslateX(elem) {
  var style = window.getComputedStyle(elem);
  var matrix = new WebKitCSSMatrix(style.webkitTransform);
  return parseInt(matrix.m41)
}

var limitLower = parseInt(getTranslateX(terminal.getElementById('track')));
var limitUpper = limitLower + parseInt(terminal.getElementById('track').getBoundingClientRect().width) - 8

// Return X position for an event
function mx(evt){
    var pt = terminal.createSVGPoint();
    pt.x = evt.clientX;
    return pt.matrixTransform(terminal.getScreenCTM().inverse());
}

// Set the current time of the animation to get the slider button under the cursor
var move = function(evt){
    var cursor_position = mx(evt);
    if ( cursor_position.x &lt; limitLower || cursor_position.x &gt; limitUpper ) {
        return;
    }
    animation.currentTime = animation_duration * 1000 * (cursor_position.x - limitLower) / (limitUpper - limitLower)
};

// Move the slider button to the cursor position when a click happens on the track of the slider
terminal.getElementById('wide_track').addEventListener('click', move, false);
terminal.getElementById('track').addEventListener('click', move, false);

// Enable slider button dragging along the track
var dragging = false;
slider_1.addEventListener('mousedown',function(evt){
        if (is_playing) {
            animation.pause()
            play_button.setAttribute('display', 'inline')
            pause_button.setAttribute('display', 'none')
        }

        dragging = true;
        terminal.addEventListener('mousemove', move, false);
        document.documentElement.addEventListener('mouseup', function(){
                dragging = false;
                if (is_playing) {
                    animation.play()
                    play_button.setAttribute('display', 'none')
                    pause_button.setAttribute('display', 'inline')
                }
                terminal.removeEventListener('mousemove', move, false);
        }, false);
}, false);

function update_slider_button() {
    var current_time = (animation.currentTime / 1000) % animation_duration
    var current_position = limitLower + (limitUpper - limitLower) * current_time / animation_duration
    slider_1.setAttribute('x', parseInt(current_position)+'px')
}

setInterval(update_slider_button, "100ms")
</script>

</svg>

